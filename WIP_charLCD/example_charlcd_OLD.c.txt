/**********************************************************************
 Using 2x16 LCD display to print 'Hello'
 
 Hardware	:	CrowPi, Raspberry Pi 3B
 Software	:	Raspbian, WiringPi

 Compilation	:	gcc -Wall [this_file.c] -l wiringPi
***********************************************************************/

#include <stdio.h>
#include <wiringPi.h>
#include <string.h>
#include <unistd.h>			//Needed for I2C port
#include <fcntl.h>			//Needed for I2C port
#include <sys/ioctl.h>			//Needed for I2C port
#include <linux/i2c-dev.h>		//Needed for I2C port

int open_lcd( int addr );
unsigned char *read_bytes( int file_i2c, unsigned int length );
int write_bytes( int file_i2c, char *text );


//----- MAIN FUNCTION ----------------------------------------------------

void main()
{
	int length;
	unsigned char buffer[60] = {0};
	int addr = 0x21;          //<<<<<The I2C address of the slave
	int file_i2c;

	file_i2c = open_lcd( addr );
 	printf("# %d\n", file_i2c);
	char txt[2] = {0x01, 0x02};
	write_bytes(file_i2c, txt);

}

//----- OPEN THE LCD ON I2C BUS ------------------------------------------

int open_lcd( int addr )
{
	int file_i2c;
	char *filename = (char*)"/dev/i2c-1";

	if ((file_i2c = open(filename, O_RDWR)) < 0) {
		//ERROR HANDLING: you can check errno to see what went wrong
		printf("Failed to open the i2c bus");
		return 0;
	}

	if (ioctl(file_i2c, I2C_SLAVE, addr) < 0) {
		printf("Failed to acquire bus access and/or talk to slave.\n");
		//ERROR HANDLING; you can check errno to see what went wrong
		return 0;
	}
	return file_i2c;
}


//----- READ BYTES -------------------------------------------------------
unsigned char *read_bytes( int file_i2c, unsigned int length )
{
	static char buffer[60] = {0};

	if (read(file_i2c, buffer, length) != length) {
		//read() returns the number of bytes actually read, if it doesn't match then an error occurred (e.g. no response from the device)
		//ERROR HANDLING: i2c transaction failed
		printf("Failed to read from the i2c bus.\n");
		return "\0";
	}
	else {
		printf("Data read: %s\n", buffer);
		return buffer;
	}

}


//----- WRITE BYTES -------------------------------------------------------
int write_bytes( int file_i2c, char *text )
{
	unsigned int length = strlen(text);

	if (write(file_i2c, text, length) != length)	{
		//write() returns the number of bytes actually written, if it doesn't match then an error occurred (e.g. no response from the device)
		/* ERROR HANDLING: i2c transaction failed */
		printf("Failed to write to the i2c bus.\n");
		return -1;
	} 
	else {
		printf("Data written: %s\n", text);
		return 0;
	}
}
