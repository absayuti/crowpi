// Header file to be used for driving the LED matrix via MAX7219 on CrowPi
//
// Based on various sources, some of which are:
//		https://embeddedthoughts.com/2016/04/19/scrolling-text-on-the-8x8-led-matrix-with-max7219-drivers/
//		https://github.com/riyas-org/max7219
//
// Dec 2019

#include <stdio.h>
#include <stdlib.h>
#include <wiringPiSPI.h>
#include <unistd.h>
#include <string.h>


// LED matrix command / register numbers
#define DECODE_MODE   0x09
#define INTENSITY     0x0a
#define SCAN_LIMIT    0x0b
#define SHUTDOWN      0x0c
#define DISPLAY_TEST  0x0f
// Use SPI channel 1 when using CrowPi
#define CHANNEL		  1

// Write 2 bytes to the MAX7219 controller
static void MAX7219write( unsigned char reg_number, unsigned char data )
{
	unsigned char matrixBuffer[100];

	matrixBuffer[0] = reg_number;
	matrixBuffer[1] = data;
	wiringPiSPIDataRW( CHANNEL, matrixBuffer, 2 );
}

// Initialize LED MATRIX via MAX7219 via SPI
void init_ledmatrix()
{
    int  rc;

    rc = wiringPiSPISetup( CHANNEL, 500000 );
    if( rc<0 ) {
        printf("Error initializing SPI, rc = %d\n", rc);
        exit(rc);
    }

    MAX7219write( SCAN_LIMIT, 7);
    MAX7219write( DECODE_MODE, 0);
    MAX7219write( DISPLAY_TEST, 0);
    MAX7219write( INTENSITY, 1);
    MAX7219write( SHUTDOWN, 1);
}


// Array holding arrays of 5 Bytes for each representation of an ASCII character
// Each character is propotional. First byte is width of character. 
// Followed by 5 bytes for character definition
char characters[96][6] = {
	{3, 0b00000000,0b00000000,0b00000000,0b00000000,0b00000000}, // space
	{1, 0b01001111,0b00000000,0b00000000,0b00000000,0b00000000}, // !
	{3, 0b00000111,0b00000000,0b00000111,0b00000000,0b00000000}, // "
	{5, 0b00010100,0b01111111,0b00010100,0b01111111,0b00010100}, // #
	{5, 0b00100100,0b00101010,0b01111111,0b00101010,0b00010010}, // $
	{5, 0b00100011,0b00010011,0b00001000,0b01100100,0b01100010}, // %
	{5, 0b00110110,0b01001001,0b01010101,0b00100010,0b01010000}, // &
	{1, 0b00000011,0b00000000,0b00000000,0b00000000,0b00000000}, // '
	{3, 0b00011100,0b00100010,0b01000001,0b00000000,0b00000000}, // (
	{3, 0b01000001,0b00100010,0b00011100,0b00000000,0b00000000}, // )
	{5, 0b00010100,0b00001000,0b00111110,0b00001000,0b00010100}, // *
	{5, 0b00001000,0b00001000,0b00111110,0b00001000,0b00001000}, // +
	{2, 0b01010000,0b00110000,0b00000000,0b00000000,0b00000000}, // ,
	{4, 0b00001000,0b00001000,0b00001000,0b00001000,0b00000000}, // -
	{2, 0b01100000,0b01100000,0b00000000,0b00000000,0b00000000}, // .
	{5, 0b00100000,0b00010000,0b00001000,0b00000100,0b00000010}, // /
	{5, 0b00111110,0b01010001,0b01001001,0b01000101,0b00111110}, // 0
	{3, 0b01000010,0b01111111,0b01000000,0b00000000,0b00000000}, // 1
	{5, 0b01000010,0b01100001,0b01010001,0b01001001,0b01000110}, // 2
	{5, 0b00100001,0b01000001,0b01000101,0b01001011,0b00110001}, // 3
	{5, 0b00011000,0b00010100,0b00010010,0b01111111,0b00010000}, // 4
	{5, 0b00100111,0b01000101,0b01000101,0b01000101,0b00111001}, // 5 
	{5, 0b00111100,0b01001010,0b01001001,0b01001001,0b00110000}, // 6
	{5, 0b00000011,0b01110001,0b00001001,0b00000101,0b00000011}, // 7
	{5, 0b00110110,0b01001001,0b01001001,0b01001001,0b00110110}, // 8
	{5, 0b00000110,0b01001001,0b01001001,0b00101001,0b00011110}, // 9
	{2, 0b01101100,0b01101100,0b00000000,0b00000000,0b00000000}, // :
	{2, 0b01010110,0b00110110,0b00000000,0b00000000,0b00000000}, // ;
	{4, 0b00001000,0b00010100,0b00100010,0b01000001,0b00000000}, // <
	{4, 0b00010100,0b00010100,0b00010100,0b00010100,0b00000000}, // =
	{4, 0b01000001,0b00100010,0b00010100,0b00001000,0b00000000}, // >
	{5, 0b00000010,0b00000001,0b01010001,0b00001001,0b00000110}, // ?
	{5, 0b00110010,0b01001001,0b01111001,0b01000001,0b00111110}, // @
	{5, 0b01111110,0b00010001,0b00010001,0b00010001,0b01111110}, // A
	{5, 0b01111111,0b01001001,0b01001001,0b01001001,0b00111110}, // B
	{5, 0b00111110,0b01000001,0b01000001,0b01000001,0b00100010}, // C
	{5, 0b01111111,0b01000001,0b01000001,0b01000001,0b00111110}, // D
	{5, 0b01111111,0b01001001,0b01001001,0b01001001,0b01001001}, // E
	{5, 0b01111111,0b00001001,0b00001001,0b00001001,0b00000001}, // F
	{5, 0b00111110,0b01000001,0b01001001,0b01001001,0b00111010}, // G
	{5, 0b01111111,0b00001000,0b00001000,0b00001000,0b01111111}, // H
	{5, 0b01000001,0b01111111,0b01000001,0b00000000,0b00000000}, // I
	{5, 0b00110000,0b01000001,0b01000001,0b00111111,0b00000001}, // J
	{5, 0b01111111,0b00001000,0b00010100,0b00100010,0b01000001}, // K
	{5, 0b01111111,0b01000000,0b01000000,0b01000000,0b01000000}, // L
	{5, 0b01111111,0b00000010,0b00001100,0b00000010,0b01111111}, // M
	{5, 0b01111111,0b00000100,0b00001000,0b00010000,0b01111111}, // N
	{5, 0b00111110,0b01000001,0b01000001,0b01000001,0b00111110}, // O
	{5, 0b01111111,0b00001001,0b00001001,0b00001001,0b00000110}, // P
	{5, 0b00111110,0b01000001,0b01010001,0b00100001,0b01011110}, // Q
	{5, 0b01111111,0b00001001,0b00001001,0b00011001,0b01100110}, // R
	{5, 0b01000110,0b01001001,0b01001001,0b01001001,0b00110001}, // S 
	{5, 0b00000001,0b00000001,0b01111111,0b00000001,0b00000001}, // T
	{5, 0b00111111,0b01000000,0b01000000,0b01000000,0b00111111}, // U
	{5, 0b00001111,0b00110000,0b01000000,0b00110000,0b00001111}, // V
	{5, 0b00111111,0b01000000,0b00111000,0b01000000,0b00111111}, // W
	{5, 0b01100011,0b00010100,0b00001000,0b00010100,0b01100011}, // X 
	{5, 0b00000011,0b00000100,0b01111000,0b00000100,0b00000011}, // Y
	{5, 0b01100001,0b01010001,0b01001001,0b01000101,0b01000011}, // Z
	{3, 0b01111111,0b01000001,0b01000001,0b00000000,0b00000000}, // [
	{5, 0b00000010,0b00000100,0b00001000,0b00010000,0b00100000}, // '\'
	{3, 0b01000001,0b01000001,0b01111111,0b00000000,0b00000000}, // ]
	{5, 0b00000100,0b00000010,0b00000001,0b00000010,0b00000100}, // ^
	{4, 0b01000000,0b01000000,0b01000000,0b01000000,0b00000000}, // _
	{3, 0b00000001,0b00000010,0b00000100,0b00000000,0b00000000}, // `
	{5, 0b00100000,0b01010100,0b01010100,0b01010100,0b01111000}, // a
	{5, 0b01111111,0b01001000,0b01000100,0b01000100,0b00111000}, // b
	{5, 0b00111000,0b01000100,0b01000100,0b01000100,0b00100000}, // c
	{5, 0b00111000,0b01000100,0b01000100,0b01001000,0b01111111}, // d
	{5, 0b00111000,0b01010100,0b01010100,0b01010100,0b00011000}, // e
	{5, 0b00001000,0b01111110,0b00001001,0b00000001,0b00000010}, // f
	{5, 0b00001100,0b01010010,0b01010010,0b01010010,0b00111110}, // g
	{5, 0b01111111,0b00001000,0b00000100,0b00000100,0b01111000}, // h
	{3, 0b01000100,0b01111101,0b01000000,0b00000000,0b00000000}, // i
	{4, 0b00100000,0b01000000,0b01000100,0b00111101,0b00000000}, // j
	{4, 0b01111111,0b00010000,0b00101000,0b01000100,0b00000000}, // k
	{3, 0b01000001,0b01111111,0b01000000,0b00000000,0b00000000}, // l
	{5, 0b01111000,0b00000100,0b00001000,0b00000100,0b01111000}, // m
 	{5, 0b01111100,0b00001000,0b00000100,0b00000100,0b01111000}, // n
 	{5, 0b00111000,0b01000100,0b01000100,0b01000100,0b00111000}, // o
	{5, 0b01111100,0b00010100,0b00010100,0b00010100,0b00001000}, // p
	{5, 0b00001000,0b00010100,0b00010100,0b01111100,0b00000000}, // q
 	{5, 0b01111100,0b00001000,0b00000100,0b00000100,0b00001000}, // r
 	{5, 0b01001000,0b01010100,0b01010100,0b01010100,0b00100000}, // s
 	{5, 0b00000100,0b00111111,0b01000100,0b01000000,0b00100000}, // t
 	{5, 0b00111100,0b01000000,0b01000000,0b00100000,0b01111100}, // u
 	{5, 0b00011100,0b00100000,0b01000000,0b00100000,0b00011100}, // v
 	{5, 0b00111100,0b01000000,0b00110000,0b01000000,0b00111100}, // w
 	{5, 0b01000100,0b00101000,0b00010000,0b00101000,0b01000100}, // x
 	{5, 0b00001100,0b01010000,0b01010000,0b01010000,0b00111100}, // y
 	{5, 0b01000100,0b01100100,0b01010100,0b01001100,0b01000100}, // z          
 	{3, 0b00001000,0b00110110,0b01000001,0b00000000,0b00000000}, // { 
 	{1, 0b01111111,0b00000000,0b00000000,0b00000000,0b00000000}, // |
	{3, 0b01000001,0b00110110,0b00001000,0b00000000,0b00000000}, // }
 	{5, 0b00001000,0b00000100,0b00000100,0b00001000,0b00000100} // ~    
}; // characters[95]


char matrixBuffer[8];

// Initializes buffer empty
void initBuffer( void )
{
	int i;
	for( i = 0; i < 8; i++ )
		matrixBuffer[i] = 0x00;
}


// Display buffer on LED matrix
void displayBuffer( void )
{
	int i;
	for( i = 0; i < 8; i++ )
		MAX7219write( i+1, matrixBuffer[i] );
}


// Pushes in and display 5 characters columns one by one 
void pushCharacter(  int n, unsigned long delay )
{
	int  i, r, w = characters[n][0];
	char c;

	for( i = 0; i < w; i++ ) {				// For 5 bytes representing each character
		c = characters[n][i+1];				// Copy to a temp var
		for( r = 0; r < 8; r++ ) {			// Loop through all 8 rows of matrix
			matrixBuffer[r] = matrixBuffer[r] | (c%2);  // Push LSB/char into LSB/buffer
			c >>= 1;						// Shift next bit in char to LSB/char
		}
		displayBuffer();					// Display the current buffer on the devices
		usleep( delay*1000 );				// and delay
		for( r = 0; r < 8; r++ ) {			// Shift left every matrix row
			matrixBuffer[r] <<= 1;
		}
	}
}


// Takes a pointer to the beginning of a char array holding message, and array size, scrolls message.
void displayMessage( char *text, unsigned long delay )
{
	int  i, r, charnum, length;

	length = strlen( text );

	for( i = 0; i < length; i++) {
		charnum = text[i] - 32;
		if( charnum < 0 ) charnum = 0;
		pushCharacter( charnum, delay);		// Send converted ASCII value of character in message to index in characters array (-32 sends corrent index to characters array)
		for( r = 0; r < 8; r++ ) {			// Shift left every matrix row
			matrixBuffer[r] <<= 1;			// to add gap before next character
		}
	}
}


